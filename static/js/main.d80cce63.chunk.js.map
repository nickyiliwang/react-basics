{"version":3,"sources":["components/FireBaseBook-Shelf/FirebaseBookShelf.js","components/firebase/keys.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","dbRef","database","ref","FirebaseBookShelf","state","books","currentUserInput","handelOnChange","e","setState","target","value","handelOnSubmit","preventDefault","booksToBeUpdated","push","handleOnDelete","bookIdToDelete","filteredBookArr","filter","book","bookId","child","remove","on","snapshot","val","updateBooksArray","key","bookTitle","this","map","className","onClick","onSubmit","htmlFor","id","type","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TAMAA,IAASC,cCNsB,CAC7BC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBDDjB,IAAMC,EAAQV,IAASW,WAAWC,MAEbC,E,2MACnBC,MAAQ,CACNC,MAAO,GACPC,iBAAkB,I,EAyBpBC,eAAiB,SAAAC,GACf,EAAKC,SAAS,CACZH,iBAAkBE,EAAEE,OAAOC,S,EAI/BC,eAAiB,SAAAJ,GACfA,EAAEK,iBACF,IAAIC,EAAmB,EAAKV,MAAME,iBAET,KAArBQ,IACFd,EAAMe,KAAKD,GACX,EAAKL,SAAS,CACZH,iBAAkB,O,EAKxBU,eAAiB,SAAAC,GACf,IAAMC,EAAkB,EAAKd,MAAMC,MAAMc,QAAO,SAAAC,GAC/C,OAAOA,EAAKC,SAAWJ,KAGxB,EAAKR,SAAS,CACVJ,MAAOa,IAGXlB,EAAMsB,MAAML,GAAgBM,U,mFAjDT,IAAD,OAIlBvB,EAAMwB,GAAG,SAAS,SAAAC,GAChB,IAAMxB,EAAWwB,EAASC,MACpBC,EAAmB,GACzB,IAAK,IAAIC,KAAO3B,EACd0B,EAAiBZ,KAAK,CACpBM,OAAQO,EACRC,UAAW5B,EAAS2B,KAGxB,EAAKnB,SAAS,CACZJ,MAAOsB,S,+BAuCH,IAAD,OACP,OACE,6BACE,gEACA,4BACGG,KAAK1B,MAAMC,MAAM0B,KAAI,SAACX,GACrB,OACE,wBAAIQ,IAAKR,EAAKC,QACXD,EAAKS,UACN,0BACEG,UAAU,aACVC,QAAS,kBAAM,EAAKjB,eAAeI,EAAKC,UAF1C,UAUR,0BAAMa,SAAUJ,KAAKlB,gBACnB,2BAAOuB,QAAQ,cACf,2BACEC,GAAG,YACHC,KAAK,OACL1B,MAAOmB,KAAK1B,MAAME,iBAClBgC,SAAUR,KAAKvB,iBAEjB,4BAAQ8B,KAAK,UAAb,8B,GAtFqCE,aEL1BC,E,iLAEjB,OACE,6BACE,kBAAC,EAAD,W,GAJyBD,aCQbE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d80cce63.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\nimport { bookshelfConfig } from \"../firebase/keys\";\r\nimport \"./book.css\";\r\n\r\nfirebase.initializeApp(bookshelfConfig);\r\nconst dbRef = firebase.database().ref();\r\n\r\nexport default class FirebaseBookShelf extends Component {\r\n  state = {\r\n    books: [],\r\n    currentUserInput: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    // connect app to firebase in componentDidMount\r\n\r\n    // fuck shitty ass fucking garbage function decor\r\n    dbRef.on(\"value\", snapshot => {\r\n      const database = snapshot.val();\r\n      const updateBooksArray = [];\r\n      for (let key in database) {\r\n        updateBooksArray.push({\r\n          bookId: key,\r\n          bookTitle: database[key]\r\n        });\r\n      }\r\n      this.setState({\r\n        books: updateBooksArray\r\n      });\r\n    });\r\n\r\n    // listen on the dbRef for when the value of the database changes\r\n    // whenever it does - update our state\r\n  }\r\n\r\n  handelOnChange = e => {\r\n    this.setState({\r\n      currentUserInput: e.target.value\r\n    });\r\n  };\r\n\r\n  handelOnSubmit = e => {\r\n    e.preventDefault();\r\n    let booksToBeUpdated = this.state.currentUserInput;\r\n    // add 'bookToBeUpdated to firebase, so that the dbRef listener will be called and it will update state and cause the ap to re-render\r\n    if (booksToBeUpdated !== \"\") {\r\n      dbRef.push(booksToBeUpdated);\r\n      this.setState({\r\n        currentUserInput: \"\"\r\n      });\r\n    }\r\n  };\r\n\r\n  handleOnDelete = bookIdToDelete => {\r\n    const filteredBookArr = this.state.books.filter(book => {\r\n     return book.bookId !== bookIdToDelete;\r\n    });\r\n\r\n    this.setState({\r\n        books: filteredBookArr\r\n    })\r\n\r\n    dbRef.child(bookIdToDelete).remove();\r\n\r\n};\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Rainy Day Bookshelf ðŸŒ§</h1>\r\n        <ul>\r\n          {this.state.books.map((book) => {\r\n            return (\r\n              <li key={book.bookId}>\r\n                {book.bookTitle}\r\n                <span\r\n                  className=\"deleteBook\"\r\n                  onClick={() => this.handleOnDelete(book.bookId)}\r\n                >\r\n                  X\r\n                </span>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n        <form onSubmit={this.handelOnSubmit}>\r\n          <label htmlFor=\"bookTitle\"></label>\r\n          <input\r\n            id=\"bookTitle\"\r\n            type=\"text\"\r\n            value={this.state.currentUserInput}\r\n            onChange={this.handelOnChange}\r\n          />\r\n          <button type=\"submit\">Add Book To the List</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export const bookshelfConfig = {\r\n  apiKey: \"AIzaSyB-o1JcRDkKCc-UBo_dQDNVorrKyk8F89Q\",\r\n  authDomain: \"practice-app-c6c48.firebaseapp.com\",\r\n  databaseURL: \"https://practice-app-c6c48.firebaseio.com\",\r\n  projectId: \"practice-app-c6c48\",\r\n  storageBucket: \"practice-app-c6c48.appspot.com\",\r\n  messagingSenderId: \"146157259458\",\r\n  appId: \"1:146157259458:web:164dda805a7bf596b7495b\",\r\n  measurementId: \"G-NG2TVENT5H\"\r\n};\r\n\r\n\r\nexport const todoAppConfig = {\r\n  apiKey: \"AIzaSyDpR7Aq_tldFQ-mj-W3Lhk6J6UTFChiBFo\",\r\n  authDomain: \"todoapp-f0819.firebaseapp.com\",\r\n  databaseURL: \"https://todoapp-f0819.firebaseio.com\",\r\n  projectId: \"todoapp-f0819\",\r\n  storageBucket: \"todoapp-f0819.appspot.com\",\r\n  messagingSenderId: \"1043639975023\",\r\n  appId: \"1:1043639975023:web:d011c7708db2d716c8219a\"\r\n};","import React, { Component } from 'react'\nimport './App.css'\nimport FirebaseBookShelf from './components/FireBaseBook-Shelf/FirebaseBookShelf'\n// import Todo from './components/todolistWithFirebase/Todo' \nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <FirebaseBookShelf />\n      {/* <Todo /> */}\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}